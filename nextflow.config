/*
vim: syntax=groovy
-*- mode: groovy;-*-
 * -------------------------------------------------
 *  BABS ATACSeq Paired-End Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

    outdir = './results'
    genome_base = '/camp/stp/babs/working/patelh/genome'
    clusterOptions = false

    version = '1.0'                                // Pipeline version
    nf_required_version = '0.30.2'                 // Minimum version of Nextflow required

}

profiles {

    standard {
        includeConfig 'conf/base.config'
        includeConfig 'conf/genomes.config'
    }
    babs_modules {
        includeConfig 'conf/base.config'
        includeConfig 'conf/babs_modules.config'
        includeConfig 'conf/genomes.config'
    }
    conda {
        includeConfig 'conf/base.config'
        includeConfig 'conf/conda.config'
        includeConfig 'conf/genomes.config'
    }
    none {
        // Don't load any config (for use with custom home configs)
    }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

conda {
    createTimeout = "60 min"
}
timeline {
    enabled = true
    file = "${params.outdir}/pipeline/BABS-ATACSeqPE_timeline.html"
}
report {
    enabled = true
    file = "${params.outdir}/pipeline/BABS-ATACSeqPE_report.html"
}
trace {
    enabled = true
    file = "${params.outdir}/pipeline/BABS-ATACSeqPE_trace.txt"
}
dag {
    enabled = true
    file = "${params.outdir}/pipeline/BABS-ATACSeqPE_dag.dot"
}
manifest {
    homePage = 'https://github.com/crickbabs/BABS-ATACSeqPE'
    description = 'Nextflow ATACSeq best practice analysis pipeline for paired-end Illumina data, used at the Francis Crick Institute.'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
      } catch (all) {
          println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
          return obj
      }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
